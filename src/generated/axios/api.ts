/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface DoctorDTO
 */
export interface DoctorDTO {
  /**
   *
   * @type {number}
   * @memberof DoctorDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof DoctorDTO
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorDTO
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorDTO
   */
  phoneNumber?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorDTO
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorDTO
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorDTO
   */
  avatar?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorDTO
   */
  profession?: string;
  /**
   *
   * @type {Array<PatientDTO>}
   * @memberof DoctorDTO
   */
  latestPatients?: Array<PatientDTO>;
}
/**
 *
 * @export
 * @interface DoctorFilterDTO
 */
export interface DoctorFilterDTO {
  /**
   *
   * @type {string}
   * @memberof DoctorFilterDTO
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorFilterDTO
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorFilterDTO
   */
  profession?: string;
}
/**
 *
 * @export
 * @interface PatientDTO
 */
export interface PatientDTO {
  /**
   *
   * @type {number}
   * @memberof PatientDTO
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof PatientDTO
   */
  opd?: number;
  /**
   *
   * @type {number}
   * @memberof PatientDTO
   */
  idp?: number;
  /**
   *
   * @type {string}
   * @memberof PatientDTO
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PatientDTO
   */
  surname?: string;
  /**
   *
   * @type {number}
   * @memberof PatientDTO
   */
  phoneNumber?: number;
  /**
   *
   * @type {string}
   * @memberof PatientDTO
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof PatientDTO
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof PatientDTO
   */
  avatar?: string;
  /**
   *
   * @type {string}
   * @memberof PatientDTO
   */
  bloodGroup?: PatientDTOBloodGroupEnum;
  /**
   *
   * @type {string}
   * @memberof PatientDTO
   */
  notes?: string;
  /**
   *
   * @type {boolean}
   * @memberof PatientDTO
   */
  chronicPatient?: boolean;
  /**
   *
   * @type {string}
   * @memberof PatientDTO
   */
  lastAdmission?: string;
  /**
   *
   * @type {number}
   * @memberof PatientDTO
   */
  lastDoctorVisitedId?: number;
  /**
   *
   * @type {Array<PatientRecordDTO>}
   * @memberof PatientDTO
   */
  patientRecords?: Array<PatientRecordDTO>;
  /**
   *
   * @type {Array<number>}
   * @memberof PatientDTO
   */
  doctorIds?: Array<number>;
}

export const PatientDTOBloodGroupEnum = {
  ZeroPlus: "ZERO_PLUS",
  ZeroMinus: "ZERO_MINUS",
  APlus: "A_PLUS",
  AMinus: "A_MINUS",
  BPlus: "B_PLUS",
  BMinus: "B_MINUS",
  AbPlus: "AB_PLUS",
  AbMinus: "AB_MINUS",
} as const;

export type PatientDTOBloodGroupEnum = (typeof PatientDTOBloodGroupEnum)[keyof typeof PatientDTOBloodGroupEnum];

/**
 *
 * @export
 * @interface PatientFilterDTO
 */
export interface PatientFilterDTO {
  /**
   *
   * @type {string}
   * @memberof PatientFilterDTO
   */
  text?: string;
  /**
   *
   * @type {number}
   * @memberof PatientFilterDTO
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof PatientFilterDTO
   */
  opd?: number;
  /**
   *
   * @type {number}
   * @memberof PatientFilterDTO
   */
  idp?: number;
  /**
   *
   * @type {number}
   * @memberof PatientFilterDTO
   */
  doctorId?: number;
}
/**
 *
 * @export
 * @interface PatientRecordDTO
 */
export interface PatientRecordDTO {
  /**
   *
   * @type {number}
   * @memberof PatientRecordDTO
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof PatientRecordDTO
   */
  patientId?: number;
  /**
   *
   * @type {DoctorDTO}
   * @memberof PatientRecordDTO
   */
  doctor?: DoctorDTO;
  /**
   *
   * @type {string}
   * @memberof PatientRecordDTO
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof PatientRecordDTO
   */
  typeVisit?: string;
  /**
   *
   * @type {string}
   * @memberof PatientRecordDTO
   */
  reasonVisit?: string;
  /**
   *
   * @type {string}
   * @memberof PatientRecordDTO
   */
  treatmentMade?: string;
}

/**
 * DoctorApiApi - axios parameter creator
 * @export
 */
export const DoctorApiApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {DoctorDTO} doctorDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDoctor: async (doctorDTO: DoctorDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'doctorDTO' is not null or undefined
      assertParamExists("createDoctor", "doctorDTO", doctorDTO);
      const localVarPath = `/api/doctor`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(doctorDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDoctor: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteDoctor", "id", id);
      const localVarPath = `/api/doctor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDoctor: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getDoctor", "id", id);
      const localVarPath = `/api/doctor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} page
     * @param {number} size
     * @param {string} sort
     * @param {DoctorFilterDTO} doctorFilterDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListDoctor: async (
      page: number,
      size: number,
      sort: string,
      doctorFilterDTO: DoctorFilterDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getListDoctor", "page", page);
      // verify required parameter 'size' is not null or undefined
      assertParamExists("getListDoctor", "size", size);
      // verify required parameter 'sort' is not null or undefined
      assertParamExists("getListDoctor", "sort", sort);
      // verify required parameter 'doctorFilterDTO' is not null or undefined
      assertParamExists("getListDoctor", "doctorFilterDTO", doctorFilterDTO);
      const localVarPath = `/api/doctor/filter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(doctorFilterDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {DoctorDTO} doctorDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDoctor: async (id: number, doctorDTO: DoctorDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateDoctor", "id", id);
      // verify required parameter 'doctorDTO' is not null or undefined
      assertParamExists("updateDoctor", "doctorDTO", doctorDTO);
      const localVarPath = `/api/doctor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(doctorDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DoctorApiApi - functional programming interface
 * @export
 */
export const DoctorApiApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DoctorApiApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {DoctorDTO} doctorDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDoctor(
      doctorDTO: DoctorDTO,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createDoctor(doctorDTO, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDoctor(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDoctor(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDoctor(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDoctor(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} page
     * @param {number} size
     * @param {string} sort
     * @param {DoctorFilterDTO} doctorFilterDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getListDoctor(
      page: number,
      size: number,
      sort: string,
      doctorFilterDTO: DoctorFilterDTO,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DoctorDTO>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getListDoctor(
        page,
        size,
        sort,
        doctorFilterDTO,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} id
     * @param {DoctorDTO} doctorDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateDoctor(
      id: number,
      doctorDTO: DoctorDTO,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateDoctor(id, doctorDTO, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DoctorApiApi - factory interface
 * @export
 */
export const DoctorApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DoctorApiApiFp(configuration);
  return {
    /**
     *
     * @param {DoctorDTO} doctorDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDoctor(doctorDTO: DoctorDTO, options?: any): AxiosPromise<DoctorDTO> {
      return localVarFp.createDoctor(doctorDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDoctor(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deleteDoctor(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDoctor(id: number, options?: any): AxiosPromise<DoctorDTO> {
      return localVarFp.getDoctor(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} page
     * @param {number} size
     * @param {string} sort
     * @param {DoctorFilterDTO} doctorFilterDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListDoctor(
      page: number,
      size: number,
      sort: string,
      doctorFilterDTO: DoctorFilterDTO,
      options?: any
    ): AxiosPromise<Array<DoctorDTO>> {
      return localVarFp
        .getListDoctor(page, size, sort, doctorFilterDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {DoctorDTO} doctorDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDoctor(id: number, doctorDTO: DoctorDTO, options?: any): AxiosPromise<void> {
      return localVarFp.updateDoctor(id, doctorDTO, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DoctorApiApi - object-oriented interface
 * @export
 * @class DoctorApiApi
 * @extends {BaseAPI}
 */
export class DoctorApiApi extends BaseAPI {
  /**
   *
   * @param {DoctorDTO} doctorDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorApiApi
   */
  public createDoctor(doctorDTO: DoctorDTO, options?: AxiosRequestConfig) {
    return DoctorApiApiFp(this.configuration)
      .createDoctor(doctorDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorApiApi
   */
  public deleteDoctor(id: number, options?: AxiosRequestConfig) {
    return DoctorApiApiFp(this.configuration)
      .deleteDoctor(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorApiApi
   */
  public getDoctor(id: number, options?: AxiosRequestConfig) {
    return DoctorApiApiFp(this.configuration)
      .getDoctor(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} page
   * @param {number} size
   * @param {string} sort
   * @param {DoctorFilterDTO} doctorFilterDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorApiApi
   */
  public getListDoctor(
    page: number,
    size: number,
    sort: string,
    doctorFilterDTO: DoctorFilterDTO,
    options?: AxiosRequestConfig
  ) {
    return DoctorApiApiFp(this.configuration)
      .getListDoctor(page, size, sort, doctorFilterDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {DoctorDTO} doctorDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorApiApi
   */
  public updateDoctor(id: number, doctorDTO: DoctorDTO, options?: AxiosRequestConfig) {
    return DoctorApiApiFp(this.configuration)
      .updateDoctor(id, doctorDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PatientApiApi - axios parameter creator
 * @export
 */
export const PatientApiApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {PatientDTO} patientDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPatient: async (patientDTO: PatientDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'patientDTO' is not null or undefined
      assertParamExists("createPatient", "patientDTO", patientDTO);
      const localVarPath = `/api/patient`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patientDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePatient: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deletePatient", "id", id);
      const localVarPath = `/api/patient/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} page
     * @param {number} size
     * @param {string} sort
     * @param {PatientFilterDTO} patientFilterDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListPatient: async (
      page: number,
      size: number,
      sort: string,
      patientFilterDTO: PatientFilterDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getListPatient", "page", page);
      // verify required parameter 'size' is not null or undefined
      assertParamExists("getListPatient", "size", size);
      // verify required parameter 'sort' is not null or undefined
      assertParamExists("getListPatient", "sort", sort);
      // verify required parameter 'patientFilterDTO' is not null or undefined
      assertParamExists("getListPatient", "patientFilterDTO", patientFilterDTO);
      const localVarPath = `/api/patient/filter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patientFilterDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatient: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPatient", "id", id);
      const localVarPath = `/api/patient/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PatientDTO} patientDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePatient: async (
      id: number,
      patientDTO: PatientDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updatePatient", "id", id);
      // verify required parameter 'patientDTO' is not null or undefined
      assertParamExists("updatePatient", "patientDTO", patientDTO);
      const localVarPath = `/api/patient/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patientDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PatientApiApi - functional programming interface
 * @export
 */
export const PatientApiApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PatientApiApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {PatientDTO} patientDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPatient(
      patientDTO: PatientDTO,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPatient(patientDTO, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePatient(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePatient(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} page
     * @param {number} size
     * @param {string} sort
     * @param {PatientFilterDTO} patientFilterDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getListPatient(
      page: number,
      size: number,
      sort: string,
      patientFilterDTO: PatientFilterDTO,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatientDTO>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getListPatient(
        page,
        size,
        sort,
        patientFilterDTO,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPatient(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPatient(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} id
     * @param {PatientDTO} patientDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePatient(
      id: number,
      patientDTO: PatientDTO,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePatient(id, patientDTO, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PatientApiApi - factory interface
 * @export
 */
export const PatientApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PatientApiApiFp(configuration);
  return {
    /**
     *
     * @param {PatientDTO} patientDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPatient(patientDTO: PatientDTO, options?: any): AxiosPromise<PatientDTO> {
      return localVarFp.createPatient(patientDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePatient(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deletePatient(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} page
     * @param {number} size
     * @param {string} sort
     * @param {PatientFilterDTO} patientFilterDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListPatient(
      page: number,
      size: number,
      sort: string,
      patientFilterDTO: PatientFilterDTO,
      options?: any
    ): AxiosPromise<Array<PatientDTO>> {
      return localVarFp
        .getListPatient(page, size, sort, patientFilterDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatient(id: number, options?: any): AxiosPromise<PatientDTO> {
      return localVarFp.getPatient(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {PatientDTO} patientDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePatient(id: number, patientDTO: PatientDTO, options?: any): AxiosPromise<void> {
      return localVarFp.updatePatient(id, patientDTO, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PatientApiApi - object-oriented interface
 * @export
 * @class PatientApiApi
 * @extends {BaseAPI}
 */
export class PatientApiApi extends BaseAPI {
  /**
   *
   * @param {PatientDTO} patientDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientApiApi
   */
  public createPatient(patientDTO: PatientDTO, options?: AxiosRequestConfig) {
    return PatientApiApiFp(this.configuration)
      .createPatient(patientDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientApiApi
   */
  public deletePatient(id: number, options?: AxiosRequestConfig) {
    return PatientApiApiFp(this.configuration)
      .deletePatient(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} page
   * @param {number} size
   * @param {string} sort
   * @param {PatientFilterDTO} patientFilterDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientApiApi
   */
  public getListPatient(
    page: number,
    size: number,
    sort: string,
    patientFilterDTO: PatientFilterDTO,
    options?: AxiosRequestConfig
  ) {
    return PatientApiApiFp(this.configuration)
      .getListPatient(page, size, sort, patientFilterDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientApiApi
   */
  public getPatient(id: number, options?: AxiosRequestConfig) {
    return PatientApiApiFp(this.configuration)
      .getPatient(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {PatientDTO} patientDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientApiApi
   */
  public updatePatient(id: number, patientDTO: PatientDTO, options?: AxiosRequestConfig) {
    return PatientApiApiFp(this.configuration)
      .updatePatient(id, patientDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PatientRecordApiApi - axios parameter creator
 * @export
 */
export const PatientRecordApiApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {PatientRecordDTO} patientRecordDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPatientRecord: async (
      patientRecordDTO: PatientRecordDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'patientRecordDTO' is not null or undefined
      assertParamExists("createPatientRecord", "patientRecordDTO", patientRecordDTO);
      const localVarPath = `/api/patientRecord`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patientRecordDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePatientRecord: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deletePatientRecord", "id", id);
      const localVarPath = `/api/patientRecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatientRecord: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPatientRecord", "id", id);
      const localVarPath = `/api/patientRecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PatientRecordDTO} patientRecordDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePatientRecord: async (
      id: number,
      patientRecordDTO: PatientRecordDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updatePatientRecord", "id", id);
      // verify required parameter 'patientRecordDTO' is not null or undefined
      assertParamExists("updatePatientRecord", "patientRecordDTO", patientRecordDTO);
      const localVarPath = `/api/patientRecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patientRecordDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PatientRecordApiApi - functional programming interface
 * @export
 */
export const PatientRecordApiApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PatientRecordApiApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {PatientRecordDTO} patientRecordDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPatientRecord(
      patientRecordDTO: PatientRecordDTO,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientRecordDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPatientRecord(patientRecordDTO, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePatientRecord(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePatientRecord(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPatientRecord(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientRecordDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPatientRecord(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} id
     * @param {PatientRecordDTO} patientRecordDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePatientRecord(
      id: number,
      patientRecordDTO: PatientRecordDTO,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePatientRecord(id, patientRecordDTO, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PatientRecordApiApi - factory interface
 * @export
 */
export const PatientRecordApiApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PatientRecordApiApiFp(configuration);
  return {
    /**
     *
     * @param {PatientRecordDTO} patientRecordDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPatientRecord(patientRecordDTO: PatientRecordDTO, options?: any): AxiosPromise<PatientRecordDTO> {
      return localVarFp.createPatientRecord(patientRecordDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePatientRecord(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deletePatientRecord(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatientRecord(id: number, options?: any): AxiosPromise<PatientRecordDTO> {
      return localVarFp.getPatientRecord(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {PatientRecordDTO} patientRecordDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePatientRecord(id: number, patientRecordDTO: PatientRecordDTO, options?: any): AxiosPromise<void> {
      return localVarFp.updatePatientRecord(id, patientRecordDTO, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PatientRecordApiApi - object-oriented interface
 * @export
 * @class PatientRecordApiApi
 * @extends {BaseAPI}
 */
export class PatientRecordApiApi extends BaseAPI {
  /**
   *
   * @param {PatientRecordDTO} patientRecordDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientRecordApiApi
   */
  public createPatientRecord(patientRecordDTO: PatientRecordDTO, options?: AxiosRequestConfig) {
    return PatientRecordApiApiFp(this.configuration)
      .createPatientRecord(patientRecordDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientRecordApiApi
   */
  public deletePatientRecord(id: number, options?: AxiosRequestConfig) {
    return PatientRecordApiApiFp(this.configuration)
      .deletePatientRecord(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientRecordApiApi
   */
  public getPatientRecord(id: number, options?: AxiosRequestConfig) {
    return PatientRecordApiApiFp(this.configuration)
      .getPatientRecord(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {PatientRecordDTO} patientRecordDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientRecordApiApi
   */
  public updatePatientRecord(id: number, patientRecordDTO: PatientRecordDTO, options?: AxiosRequestConfig) {
    return PatientRecordApiApiFp(this.configuration)
      .updatePatientRecord(id, patientRecordDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
