/* tslint:disable */
/* eslint-disable */
/**
 * Open Hospital BackOffice
 * Open Hospital BackOffice
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 * Doctor info
 * @export
 * @interface Doctor
 */
export interface Doctor {
  /**
   *
   * @type {number}
   * @memberof Doctor
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Doctor
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Doctor
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof Doctor
   */
  phoneNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Doctor
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof Doctor
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof Doctor
   */
  avatar?: string;
  /**
   *
   * @type {Array<PatientRecord>}
   * @memberof Doctor
   */
  patientRecords?: Array<PatientRecord>;
  /**
   *
   * @type {Array<Patient>}
   * @memberof Doctor
   */
  lastPatientsVisited?: Array<Patient>;
  /**
   *
   * @type {Array<Patient>}
   * @memberof Doctor
   */
  patients?: Array<Patient>;
}
/**
 *
 * @export
 * @interface DoctorFilter
 */
export interface DoctorFilter {
  /**
   *
   * @type {string}
   * @memberof DoctorFilter
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorFilter
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof DoctorFilter
   */
  profession?: string;
}
/**
 * Patient info
 * @export
 * @interface Patient
 */
export interface Patient {
  /**
   *
   * @type {number}
   * @memberof Patient
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof Patient
   */
  opd?: number;
  /**
   *
   * @type {number}
   * @memberof Patient
   */
  idp?: number;
  /**
   *
   * @type {string}
   * @memberof Patient
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Patient
   */
  surname?: string;
  /**
   *
   * @type {number}
   * @memberof Patient
   */
  phoneNumber?: number;
  /**
   *
   * @type {string}
   * @memberof Patient
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof Patient
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof Patient
   */
  avatar?: string;
  /**
   * blood type
   * @type {string}
   * @memberof Patient
   */
  bloodGroup?: PatientBloodGroupEnum;
  /**
   *
   * @type {string}
   * @memberof Patient
   */
  notes?: string;
  /**
   *
   * @type {boolean}
   * @memberof Patient
   */
  chronicPatient?: boolean;
  /**
   *
   * @type {string}
   * @memberof Patient
   */
  lastAdmission?: string;
  /**
   *
   * @type {Doctor}
   * @memberof Patient
   */
  lastDoctorVisited?: Doctor;
  /**
   *
   * @type {Array<PatientRecord>}
   * @memberof Patient
   */
  patientRecords?: Array<PatientRecord>;
  /**
   *
   * @type {Array<Doctor>}
   * @memberof Patient
   */
  doctors?: Array<Doctor>;
}

export const PatientBloodGroupEnum = {
  ZeroPlus: "ZERO_PLUS",
  ZeroMinus: "ZERO_MINUS",
  APlus: "A_PLUS",
  AMinus: "A_MINUS",
  BPlus: "B_PLUS",
  BMinus: "B_MINUS",
  AbPlus: "AB_PLUS",
  AbMinus: "AB_MINUS",
} as const;

export type PatientBloodGroupEnum = (typeof PatientBloodGroupEnum)[keyof typeof PatientBloodGroupEnum];

/**
 *
 * @export
 * @interface PatientFilter
 */
export interface PatientFilter {
  /**
   *
   * @type {string}
   * @memberof PatientFilter
   */
  text?: string;
}
/**
 * Doctor info
 * @export
 * @interface PatientRecord
 */
export interface PatientRecord {
  /**
   *
   * @type {number}
   * @memberof PatientRecord
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof PatientRecord
   */
  patientId?: number;
  /**
   *
   * @type {number}
   * @memberof PatientRecord
   */
  doctorId?: number;
  /**
   *
   * @type {string}
   * @memberof PatientRecord
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof PatientRecord
   */
  typeVisit?: string;
  /**
   *
   * @type {string}
   * @memberof PatientRecord
   */
  reasonVisit?: string;
  /**
   *
   * @type {number}
   * @memberof PatientRecord
   */
  treatmentMade?: number;
}

/**
 * DoctorOpenHospitalApi - axios parameter creator
 * @export
 */
export const DoctorOpenHospitalApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Insert new doctor
     * @param {Doctor} doctor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDoctor: async (doctor: Doctor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'doctor' is not null or undefined
      assertParamExists("createDoctor", "doctor", doctor);
      const localVarPath = `/doctor`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(doctor, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Doctor doctor
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDoctor: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteDoctor", "id", id);
      const localVarPath = `/doctor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get doctor
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDoctor: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getDoctor", "id", id);
      const localVarPath = `/doctor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get doctors list
     * @param {DoctorFilter} doctorFilter doctor filter data
     * @param {number} [page] the page number
     * @param {number} [size] the page size
     * @param {string} [sort] the field to be sorted (e.g.: id,desc)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListDoctor: async (
      doctorFilter: DoctorFilter,
      page?: number,
      size?: number,
      sort?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'doctorFilter' is not null or undefined
      assertParamExists("getListDoctor", "doctorFilter", doctorFilter);
      const localVarPath = `/doctor/filter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(doctorFilter, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update doctor
     * @param {number} id
     * @param {Doctor} doctor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDoctor: async (id: number, doctor: Doctor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateDoctor", "id", id);
      // verify required parameter 'doctor' is not null or undefined
      assertParamExists("updateDoctor", "doctor", doctor);
      const localVarPath = `/doctor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(doctor, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DoctorOpenHospitalApi - functional programming interface
 * @export
 */
export const DoctorOpenHospitalApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DoctorOpenHospitalApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Insert new doctor
     * @param {Doctor} doctor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDoctor(
      doctor: Doctor,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doctor>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createDoctor(doctor, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Doctor doctor
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDoctor(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDoctor(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get doctor
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDoctor(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doctor>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDoctor(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get doctors list
     * @param {DoctorFilter} doctorFilter doctor filter data
     * @param {number} [page] the page number
     * @param {number} [size] the page size
     * @param {string} [sort] the field to be sorted (e.g.: id,desc)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getListDoctor(
      doctorFilter: DoctorFilter,
      page?: number,
      size?: number,
      sort?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Doctor>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getListDoctor(doctorFilter, page, size, sort, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update doctor
     * @param {number} id
     * @param {Doctor} doctor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateDoctor(
      id: number,
      doctor: Doctor,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Doctor>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateDoctor(id, doctor, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DoctorOpenHospitalApi - factory interface
 * @export
 */
export const DoctorOpenHospitalApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DoctorOpenHospitalApiFp(configuration);
  return {
    /**
     *
     * @summary Insert new doctor
     * @param {Doctor} doctor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDoctor(doctor: Doctor, options?: any): AxiosPromise<Doctor> {
      return localVarFp.createDoctor(doctor, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Doctor doctor
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDoctor(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deleteDoctor(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get doctor
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDoctor(id: number, options?: any): AxiosPromise<Doctor> {
      return localVarFp.getDoctor(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get doctors list
     * @param {DoctorFilter} doctorFilter doctor filter data
     * @param {number} [page] the page number
     * @param {number} [size] the page size
     * @param {string} [sort] the field to be sorted (e.g.: id,desc)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListDoctor(
      doctorFilter: DoctorFilter,
      page?: number,
      size?: number,
      sort?: string,
      options?: any
    ): AxiosPromise<Array<Doctor>> {
      return localVarFp
        .getListDoctor(doctorFilter, page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update doctor
     * @param {number} id
     * @param {Doctor} doctor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDoctor(id: number, doctor: Doctor, options?: any): AxiosPromise<Doctor> {
      return localVarFp.updateDoctor(id, doctor, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DoctorOpenHospitalApi - object-oriented interface
 * @export
 * @class DoctorOpenHospitalApi
 * @extends {BaseAPI}
 */
export class DoctorOpenHospitalApi extends BaseAPI {
  /**
   *
   * @summary Insert new doctor
   * @param {Doctor} doctor
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorOpenHospitalApi
   */
  public createDoctor(doctor: Doctor, options?: AxiosRequestConfig) {
    return DoctorOpenHospitalApiFp(this.configuration)
      .createDoctor(doctor, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Doctor doctor
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorOpenHospitalApi
   */
  public deleteDoctor(id: number, options?: AxiosRequestConfig) {
    return DoctorOpenHospitalApiFp(this.configuration)
      .deleteDoctor(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get doctor
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorOpenHospitalApi
   */
  public getDoctor(id: number, options?: AxiosRequestConfig) {
    return DoctorOpenHospitalApiFp(this.configuration)
      .getDoctor(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get doctors list
   * @param {DoctorFilter} doctorFilter doctor filter data
   * @param {number} [page] the page number
   * @param {number} [size] the page size
   * @param {string} [sort] the field to be sorted (e.g.: id,desc)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorOpenHospitalApi
   */
  public getListDoctor(
    doctorFilter: DoctorFilter,
    page?: number,
    size?: number,
    sort?: string,
    options?: AxiosRequestConfig
  ) {
    return DoctorOpenHospitalApiFp(this.configuration)
      .getListDoctor(doctorFilter, page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update doctor
   * @param {number} id
   * @param {Doctor} doctor
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DoctorOpenHospitalApi
   */
  public updateDoctor(id: number, doctor: Doctor, options?: AxiosRequestConfig) {
    return DoctorOpenHospitalApiFp(this.configuration)
      .updateDoctor(id, doctor, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PatientOpenHospitalApi - axios parameter creator
 * @export
 */
export const PatientOpenHospitalApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Insert new patient
     * @param {Patient} patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPatient: async (patient: Patient, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'patient' is not null or undefined
      assertParamExists("createPatient", "patient", patient);
      const localVarPath = `/patient`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patient, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete patient
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePatient: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deletePatient", "id", id);
      const localVarPath = `/patient/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get patients list
     * @param {PatientFilter} patientFilter Patient filter data
     * @param {number} [page] the page number
     * @param {number} [size] the page size
     * @param {string} [sort] the field to be sorted (e.g.: id,desc)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListPatient: async (
      patientFilter: PatientFilter,
      page?: number,
      size?: number,
      sort?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'patientFilter' is not null or undefined
      assertParamExists("getListPatient", "patientFilter", patientFilter);
      const localVarPath = `/patient/filter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patientFilter, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get patient
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatient: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPatient", "id", id);
      const localVarPath = `/patient/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update patient
     * @param {number} id
     * @param {Patient} patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePatient: async (id: number, patient: Patient, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updatePatient", "id", id);
      // verify required parameter 'patient' is not null or undefined
      assertParamExists("updatePatient", "patient", patient);
      const localVarPath = `/patient/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patient, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PatientOpenHospitalApi - functional programming interface
 * @export
 */
export const PatientOpenHospitalApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PatientOpenHospitalApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Insert new patient
     * @param {Patient} patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPatient(
      patient: Patient,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPatient(patient, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete patient
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePatient(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePatient(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get patients list
     * @param {PatientFilter} patientFilter Patient filter data
     * @param {number} [page] the page number
     * @param {number} [size] the page size
     * @param {string} [sort] the field to be sorted (e.g.: id,desc)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getListPatient(
      patientFilter: PatientFilter,
      page?: number,
      size?: number,
      sort?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Patient>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getListPatient(
        patientFilter,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get patient
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPatient(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPatient(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update patient
     * @param {number} id
     * @param {Patient} patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePatient(
      id: number,
      patient: Patient,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePatient(id, patient, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PatientOpenHospitalApi - factory interface
 * @export
 */
export const PatientOpenHospitalApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PatientOpenHospitalApiFp(configuration);
  return {
    /**
     *
     * @summary Insert new patient
     * @param {Patient} patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPatient(patient: Patient, options?: any): AxiosPromise<Patient> {
      return localVarFp.createPatient(patient, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete patient
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePatient(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deletePatient(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get patients list
     * @param {PatientFilter} patientFilter Patient filter data
     * @param {number} [page] the page number
     * @param {number} [size] the page size
     * @param {string} [sort] the field to be sorted (e.g.: id,desc)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListPatient(
      patientFilter: PatientFilter,
      page?: number,
      size?: number,
      sort?: string,
      options?: any
    ): AxiosPromise<Array<Patient>> {
      return localVarFp
        .getListPatient(patientFilter, page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get patient
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatient(id: number, options?: any): AxiosPromise<Patient> {
      return localVarFp.getPatient(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update patient
     * @param {number} id
     * @param {Patient} patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePatient(id: number, patient: Patient, options?: any): AxiosPromise<Patient> {
      return localVarFp.updatePatient(id, patient, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PatientOpenHospitalApi - object-oriented interface
 * @export
 * @class PatientOpenHospitalApi
 * @extends {BaseAPI}
 */
export class PatientOpenHospitalApi extends BaseAPI {
  /**
   *
   * @summary Insert new patient
   * @param {Patient} patient
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientOpenHospitalApi
   */
  public createPatient(patient: Patient, options?: AxiosRequestConfig) {
    return PatientOpenHospitalApiFp(this.configuration)
      .createPatient(patient, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete patient
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientOpenHospitalApi
   */
  public deletePatient(id: number, options?: AxiosRequestConfig) {
    return PatientOpenHospitalApiFp(this.configuration)
      .deletePatient(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get patients list
   * @param {PatientFilter} patientFilter Patient filter data
   * @param {number} [page] the page number
   * @param {number} [size] the page size
   * @param {string} [sort] the field to be sorted (e.g.: id,desc)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientOpenHospitalApi
   */
  public getListPatient(
    patientFilter: PatientFilter,
    page?: number,
    size?: number,
    sort?: string,
    options?: AxiosRequestConfig
  ) {
    return PatientOpenHospitalApiFp(this.configuration)
      .getListPatient(patientFilter, page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get patient
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientOpenHospitalApi
   */
  public getPatient(id: number, options?: AxiosRequestConfig) {
    return PatientOpenHospitalApiFp(this.configuration)
      .getPatient(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update patient
   * @param {number} id
   * @param {Patient} patient
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientOpenHospitalApi
   */
  public updatePatient(id: number, patient: Patient, options?: AxiosRequestConfig) {
    return PatientOpenHospitalApiFp(this.configuration)
      .updatePatient(id, patient, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PatientRecordOpenHospitalApi - axios parameter creator
 * @export
 */
export const PatientRecordOpenHospitalApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Insert new patient record
     * @param {PatientRecord} patientRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPatientRecord: async (
      patientRecord: PatientRecord,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'patientRecord' is not null or undefined
      assertParamExists("createPatientRecord", "patientRecord", patientRecord);
      const localVarPath = `/patientRecord`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patientRecord, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete patient
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePatientRecord: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deletePatientRecord", "id", id);
      const localVarPath = `/patientRecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get patient record
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatientRecord: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPatientRecord", "id", id);
      const localVarPath = `/patientRecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update patient record
     * @param {number} id
     * @param {PatientRecord} patientRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePatientRecord: async (
      id: number,
      patientRecord: PatientRecord,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updatePatientRecord", "id", id);
      // verify required parameter 'patientRecord' is not null or undefined
      assertParamExists("updatePatientRecord", "patientRecord", patientRecord);
      const localVarPath = `/patientRecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patientRecord, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PatientRecordOpenHospitalApi - functional programming interface
 * @export
 */
export const PatientRecordOpenHospitalApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PatientRecordOpenHospitalApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Insert new patient record
     * @param {PatientRecord} patientRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPatientRecord(
      patientRecord: PatientRecord,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientRecord>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPatientRecord(patientRecord, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete patient
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePatientRecord(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePatientRecord(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get patient record
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPatientRecord(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientRecord>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPatientRecord(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update patient record
     * @param {number} id
     * @param {PatientRecord} patientRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePatientRecord(
      id: number,
      patientRecord: PatientRecord,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientRecord>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePatientRecord(id, patientRecord, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PatientRecordOpenHospitalApi - factory interface
 * @export
 */
export const PatientRecordOpenHospitalApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PatientRecordOpenHospitalApiFp(configuration);
  return {
    /**
     *
     * @summary Insert new patient record
     * @param {PatientRecord} patientRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPatientRecord(patientRecord: PatientRecord, options?: any): AxiosPromise<PatientRecord> {
      return localVarFp.createPatientRecord(patientRecord, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete patient
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePatientRecord(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deletePatientRecord(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get patient record
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPatientRecord(id: number, options?: any): AxiosPromise<PatientRecord> {
      return localVarFp.getPatientRecord(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update patient record
     * @param {number} id
     * @param {PatientRecord} patientRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePatientRecord(id: number, patientRecord: PatientRecord, options?: any): AxiosPromise<PatientRecord> {
      return localVarFp.updatePatientRecord(id, patientRecord, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PatientRecordOpenHospitalApi - object-oriented interface
 * @export
 * @class PatientRecordOpenHospitalApi
 * @extends {BaseAPI}
 */
export class PatientRecordOpenHospitalApi extends BaseAPI {
  /**
   *
   * @summary Insert new patient record
   * @param {PatientRecord} patientRecord
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientRecordOpenHospitalApi
   */
  public createPatientRecord(patientRecord: PatientRecord, options?: AxiosRequestConfig) {
    return PatientRecordOpenHospitalApiFp(this.configuration)
      .createPatientRecord(patientRecord, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete patient
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientRecordOpenHospitalApi
   */
  public deletePatientRecord(id: number, options?: AxiosRequestConfig) {
    return PatientRecordOpenHospitalApiFp(this.configuration)
      .deletePatientRecord(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get patient record
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientRecordOpenHospitalApi
   */
  public getPatientRecord(id: number, options?: AxiosRequestConfig) {
    return PatientRecordOpenHospitalApiFp(this.configuration)
      .getPatientRecord(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update patient record
   * @param {number} id
   * @param {PatientRecord} patientRecord
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientRecordOpenHospitalApi
   */
  public updatePatientRecord(id: number, patientRecord: PatientRecord, options?: AxiosRequestConfig) {
    return PatientRecordOpenHospitalApiFp(this.configuration)
      .updatePatientRecord(id, patientRecord, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
